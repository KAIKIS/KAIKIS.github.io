<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KAIKIS&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-15T15:12:46.763Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>KAIKIS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript-learn-7</title>
    <link href="http://yoursite.com/2018/12/15/javascript-learn-7/"/>
    <id>http://yoursite.com/2018/12/15/javascript-learn-7/</id>
    <published>2018-12-15T15:12:46.000Z</published>
    <updated>2018-12-15T15:12:46.763Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计笔记-理解对象</title>
    <link href="http://yoursite.com/2018/12/15/javascript-learn-6/"/>
    <id>http://yoursite.com/2018/12/15/javascript-learn-6/</id>
    <published>2018-12-15T11:41:43.000Z</published>
    <updated>2018-12-15T15:24:12.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h1><p>方式1：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">"a"</span>;</span><br><span class="line">person.age = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">person.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">方式2：  </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"a"</span>,</span><br><span class="line">    age: <span class="number">11</span>,</span><br><span class="line"></span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 属性类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 数据属性  </span></span><br><span class="line"><span class="string">| 特性名         | 解释                           | 默认值    |</span></span><br><span class="line"><span class="string">| -------------- | ------------------------------ | --------- |</span></span><br><span class="line"><span class="string">| Configuratable | 表示能否通过`</span><span class="keyword">delete</span><span class="string">`删除属性   | true      |</span></span><br><span class="line"><span class="string">| Enumerable     | 表示能否通过for-in循环返回属性 | true      |</span></span><br><span class="line"><span class="string">| Writable       | 表示能否修改属性的值           | true      |</span></span><br><span class="line"><span class="string">| Value          | 包含这个属性的数据值           | undefined |</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(属性所在的对象，属性的名字，一个描述符对象);</span><br></pre></td></tr></table></figure></p><h3 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h3><table><thead><tr><th>特性名</th><th>解释</th><th>默认值</th></tr></thead><tbody><tr><td>Configuratable</td><td>表示能否通过<code>delete</code>删除属性</td><td>true</td></tr><tr><td>Enumerable</td><td>表示能否通过for-in循环返回属性</td><td>true</td></tr><tr><td>Get</td><td>读取时调用</td><td>undefined</td></tr><tr><td>Set</td><td>写入时调用</td><td>undefined</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">    _year: <span class="number">2004</span>,</span><br><span class="line">    _edition: <span class="number">1</span><span class="comment">//下划线相当于使用private，希望别人不要直接访问该属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">"year"</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._year;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._year = newValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">可以不同时指定`</span>getter<span class="string">`和`</span>setter<span class="string">`,缺省的那一个相当于被禁止读或写。  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 定义多个属性  </span></span><br><span class="line"><span class="string">可以通过`</span><span class="built_in">Object</span>.defineProperties(修改的对象，要修改的属性)<span class="string">`方法同时定义多个属性，比如：  </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(book, &#123;</span><br><span class="line">    _year: &#123;</span><br><span class="line">        value: <span class="number">2004</span></span><br><span class="line">    &#125;,</span><br><span class="line">    _edition: &#123;</span><br><span class="line">        value: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    year:&#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._year;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>._year = newValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="获取属性的特性"><a href="#获取属性的特性" class="headerlink" title="获取属性的特性"></a>获取属性的特性</h3><p>可以通过<code>Object.getOwnPropertyDescriptor(属性所在对象，属性名称)</code>方法获取给定属性的描述符。对于数据属性和访问器属性可以分别查看它们中的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"_year"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.value);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a.get);<span class="comment">//未定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"year"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a.get);<span class="comment">//function</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;理解对象&quot;&gt;&lt;a href=&quot;#理解对象&quot; class=&quot;headerlink&quot; title=&quot;理解对象&quot;&gt;&lt;/a&gt;理解对象&lt;/h1&gt;&lt;p&gt;方式1：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="JavaScript笔记" scheme="http://yoursite.com/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Code" scheme="http://yoursite.com/tags/Code/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>javascript-learn-5</title>
    <link href="http://yoursite.com/2018/12/09/javascript-learn-5/"/>
    <id>http://yoursite.com/2018/12/09/javascript-learn-5/</id>
    <published>2018-12-09T09:48:45.000Z</published>
    <updated>2018-12-15T11:42:15.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><p>函数实际是一个对象，所以函数名实际是一个指向函数对象的指针。可以通过以下两种方式声明：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2函数表达式</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="没有重载"><a href="#没有重载" class="headerlink" title="没有重载"></a>没有重载</h2><p>由于函数名实际是一个指针，所以如果声明了两个同名函数，实际上后一个会覆盖前一个。</p><h2 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h2><p>解析器对待两种方式有不同的表现。  </p><ol><li>对函数声明：解析器会先读取，并使其在执行任何代码之前可以访问。</li><li>对函数表达式：解析器执行到它所在的代码行时，才会真正的被解释执行。有些类似于懒汉和饿汉的区别。<br>除此之外，这两种方式没有其他区别。  </li></ol><h2 id="作为值的函数"><a href="#作为值的函数" class="headerlink" title="作为值的函数"></a>作为值的函数</h2><p>由于函数名实际上是一个指针，所以函数名也可以作为值来使用。</p><h2 id="函数内部属性"><a href="#函数内部属性" class="headerlink" title="函数内部属性"></a>函数内部属性</h2><h2 id="函数属性和方法"><a href="#函数属性和方法" class="headerlink" title="函数属性和方法"></a>函数属性和方法</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Function&quot;&gt;&lt;a href=&quot;#Function&quot; class=&quot;headerlink&quot; title=&quot;Function&quot;&gt;&lt;/a&gt;Function&lt;/h1&gt;&lt;p&gt;函数实际是一个对象，所以函数名实际是一个指向函数对象的指针。可以通过以下两种方式声明：&lt;br
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计笔记4</title>
    <link href="http://yoursite.com/2018/12/09/javascript-learn-4/"/>
    <id>http://yoursite.com/2018/12/09/javascript-learn-4/</id>
    <published>2018-12-09T09:41:14.000Z</published>
    <updated>2018-12-09T09:42:23.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>ECMAScript中的数组中的每一项可以保存任何类型的数据，并且大小可以动态调整。<br>创建数组的方法也有两种：  </p><h3 id="通过new"><a href="#通过new" class="headerlink" title="通过new"></a>通过new</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);<span class="comment">//数组大小为3</span></span><br><span class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"A"</span>,<span class="string">"B"</span>);<span class="comment">//数组大小为2，并且有初始值</span></span><br></pre></td></tr></table></figure><h3 id="通过对象字面量表示法"><a href="#通过对象字面量表示法" class="headerlink" title="通过对象字面量表示法"></a>通过对象字面量表示法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line"><span class="keyword">var</span> names = [];<span class="comment">//空数组</span></span><br></pre></td></tr></table></figure><p>如果设置的某个值的索引超过了数组的长度，则数组就会自动增加长度。比如下面两个例子：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子1</span></span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num[<span class="number">3</span>]);<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(num[<span class="number">4</span>]);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(num[<span class="number">5</span>]);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(num.length);<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例子2</span></span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num[<span class="number">3</span>]);<span class="comment">//4</span></span><br><span class="line">num[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num[<span class="number">4</span>]);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(num[<span class="number">5</span>]);<span class="comment">//6</span></span><br><span class="line"><span class="built_in">console</span>.log(num.length);<span class="comment">//6</span></span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">数组的长度不是**只读的**，通过修改这个属性，会修改数组中实际的内容。通过这个特性，可以方便的在数组末尾添加新的值，比如：  </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">num[num.length] = <span class="number">5</span>;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">### 作为栈或者队列：  </span></span><br><span class="line"><span class="string">- 数组可以表现的和栈一样，可以使用`</span>push()<span class="string">`和`</span>pop()<span class="string">`来操作。  </span></span><br><span class="line"><span class="string">- 也可以像队列一样操作，使用`</span>push()<span class="string">`和`</span>shift()<span class="string">`操作；使用`</span>unshift()<span class="string">`和`</span>pop()<span class="string">`来实现与前面相反方向的操作。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 常见方法</span></span><br><span class="line"><span class="string">- 使用`</span>reverse()<span class="string">`来反转数组。</span></span><br><span class="line"><span class="string">- 使用`</span>sort()<span class="string">`按升序排列数组，它会调用每一项的`</span>toString()<span class="string">`方法然后比较得到的字符串。可以向`</span>sort()<span class="string">`方法传入一个比较器，比如：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">       &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">      &#125; </span><br><span class="line">   &#125; </span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string">- `</span>concat()<span class="string">`:</span></span><br><span class="line"><span class="string">- `</span>slice()<span class="string">`:</span></span><br><span class="line"><span class="string">- `</span>splice()<span class="string">`:</span></span><br><span class="line"><span class="string">- `</span>indexOf()<span class="string">`:</span></span><br><span class="line"><span class="string">- `</span>lastIndexOf()<span class="string">`:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 迭代方法：</span></span><br><span class="line"><span class="string">都会接收在每一项上运行的函数。</span></span><br><span class="line"><span class="string">- `</span>every()<span class="string">`：每一项都返回true，才会返回true。</span></span><br><span class="line"><span class="string">- `</span>filter()<span class="string">`：只会返回该函数返回true组成的数组。</span></span><br><span class="line"><span class="string">- `</span>forEach()<span class="string">`：对每一项运行给定函数，无返回值。</span></span><br><span class="line"><span class="string">- `</span>map()<span class="string">`：对每一项运行给定函数，返回每次函数调用结果组成的函数。</span></span><br><span class="line"><span class="string">- `</span>some()<span class="string">`：只要有一项返回true，就会返回true。</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> everyRes = nums.every(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>);</span><br><span class="line">&#125;);<span class="comment">//false</span></span><br><span class="line"><span class="comment">//其余类似</span></span><br></pre></td></tr></table></figure><ul><li>归并方法<ul><li><code>reduce()</code></li><li><code>reduceRight()</code></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Array&quot;&gt;&lt;a href=&quot;#Array&quot; class=&quot;headerlink&quot; title=&quot;Array&quot;&gt;&lt;/a&gt;Array&lt;/h2&gt;&lt;p&gt;ECMAScript中的数组中的每一项可以保存任何类型的数据，并且大小可以动态调整。&lt;br&gt;创建数组的方法也有两种：
      
    
    </summary>
    
      <category term="JavaScript笔记" scheme="http://yoursite.com/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Code" scheme="http://yoursite.com/tags/Code/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计笔记3</title>
    <link href="http://yoursite.com/2018/12/09/JavaScript%E5%AD%A6%E4%B9%A03/"/>
    <id>http://yoursite.com/2018/12/09/JavaScript学习3/</id>
    <published>2018-12-09T08:49:00.000Z</published>
    <updated>2018-12-15T11:41:58.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><h2 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h2><p>创建<code>Object</code>类型有两种方式：  </p><h3 id="通过new"><a href="#通过new" class="headerlink" title="通过new"></a>通过new</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">"a"</span>;</span><br><span class="line">person.age = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="使用对象字面量表示法"><a href="#使用对象字面量表示法" class="headerlink" title="使用对象字面量表示法"></a>使用对象字面量表示法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name = <span class="string">"a"</span>;</span><br><span class="line">    age = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>ECMAScript中的数组中的每一项可以保存任何类型的数据，并且大小可以动态调整。<br>创建数组的方法也有两种：  </p><h3 id="通过new-1"><a href="#通过new-1" class="headerlink" title="通过new"></a>通过new</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);<span class="comment">//数组大小为3</span></span><br><span class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"A"</span>,<span class="string">"B"</span>);<span class="comment">//数组大小为2，并且有初始值</span></span><br></pre></td></tr></table></figure><h3 id="通过对象字面量表示法"><a href="#通过对象字面量表示法" class="headerlink" title="通过对象字面量表示法"></a>通过对象字面量表示法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line"><span class="keyword">var</span> names = [];<span class="comment">//空数组</span></span><br></pre></td></tr></table></figure><p>如果设置的某个值的索引超过了数组的长度，则数组就会自动增加长度。比如下面两个例子：  </p><pre><code class="javascript"><span class="comment">//例子1</span><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];<span class="built_in">console</span>.log(num[<span class="number">3</span>]);<span class="comment">//4</span><span class="built_in">console</span>.log(num[<span class="number">4</span>]);<span class="comment">//undefined</span><span class="built_in">console</span>.log(num[<span class="number">5</span>]);<span class="comment">//undefined</span><span class="built_in">console</span>.log(num.length);<span class="comment">//4</span><span class="comment">//例子2</span><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];<span class="built_in">console</span>.log(num[<span class="number">3</span>]);<span class="comment">//4</span>num[<span class="number">5</span>] = <span class="number">6</span>;<span class="built_in">console</span>.log(num[<span class="number">4</span>]);<span class="comment">//undefined</span><span class="built_in">console</span>.log(num[<span class="number">5</span>]);<span class="comment">//6</span><span class="built_in">console</span>.log(num.length);<span class="comment">//6</span></code></pre><p>数组的长度不是<strong>只读的</strong>，通过修改这个属性，会修改数组中实际的内容。通过这个特性，可以方便的在数组末尾添加新的值，比如：  </p><pre><code class="javascript"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];num[num.length] = <span class="number">5</span>;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h1&gt;&lt;h2 id=&quot;Object类型&quot;&gt;&lt;a href=&quot;#Object类型&quot; class=&quot;headerlink&quot; title=&quot;O
      
    
    </summary>
    
      <category term="JavaScript笔记" scheme="http://yoursite.com/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Code" scheme="http://yoursite.com/tags/Code/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>对值传递的一些思考</title>
    <link href="http://yoursite.com/2018/12/08/%E5%AF%B9%E5%80%BC%E4%BC%A0%E9%80%92%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2018/12/08/对值传递的一些思考/</id>
    <published>2018-12-08T10:39:30.000Z</published>
    <updated>2018-12-08T16:47:15.910Z</updated>
    
    <content type="html"><![CDATA[<p>在Java中，我们知道有基本类型和引用类型，比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">String b = <span class="string">"20"</span>;</span><br></pre></td></tr></table></figure></p><p>对于基本类型，变量中保存着实际的值，赋值运算符会直接改变变量里面的值；<br>对于引用类型，变量里保存着实际对象的地址，赋值运算符会改变引用中保存的地址。  </p><p>那么对于向方法中传递参数时，可以分为以下几种情形。  </p><ol><li><p>传递基本类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">int</span> num = <span class="number">2</span>;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">       a = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    System.out.println(num);<span class="comment">//2</span></span><br><span class="line">   ```  </span><br><span class="line"><span class="number">2</span>. 传递引用类型，传递引用类型也可以分为两种：  </span><br><span class="line">    <span class="number">1</span>. 传递`immutable`对象时，比如String</span><br><span class="line">    ```java</span><br><span class="line">    String a = <span class="string">"h"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">(String b)</span></span>&#123;</span><br><span class="line">        b = <span class="string">"hh"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(a);<span class="comment">//h</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>传递普通对象时  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person(<span class="number">3</span>, <span class="string">"aa"</span>);</span><br><span class="line">change(person);</span><br><span class="line">System.out.println(person);<span class="comment">//aaa,4</span></span><br><span class="line">change2(person);</span><br><span class="line">System.out.println(person);<span class="comment">//aaa,4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line">    p.age = <span class="number">4</span>;</span><br><span class="line">    p.name = <span class="string">"aaa"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change2</span><span class="params">(Person p2)</span> </span>&#123;</span><br><span class="line">    p2 = <span class="keyword">new</span> Person(<span class="number">5</span>, <span class="string">"aaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">","</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个问题，为什么两次的输出是一样的，也就是说<code>change2()</code>没有改变原来的对象？  </p></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Java中，我们知道有基本类型和引用类型，比如：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计笔记2</title>
    <link href="http://yoursite.com/2018/12/02/JavaScript%E5%AD%A6%E4%B9%A02/"/>
    <id>http://yoursite.com/2018/12/02/JavaScript学习2/</id>
    <published>2018-12-02T14:13:19.000Z</published>
    <updated>2018-12-08T13:55:06.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量、作用域和内存问题"><a href="#变量、作用域和内存问题" class="headerlink" title="变量、作用域和内存问题"></a>变量、作用域和内存问题</h1><p>ECMAScript变量包含了两种数据类型的值：</p><ul><li>基本类型：之前的5种基本数据类型</li><li>引用类型：和Java类似。<code>Object</code>类型。  </li></ul><h2 id="基本类型和引用类型的值"><a href="#基本类型和引用类型的值" class="headerlink" title="基本类型和引用类型的值"></a>基本类型和引用类型的值</h2><h3 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h3><p>对于引用类型，可以动态的为其添加属性和方法。但不能对基本类型这样操作。  </p><h3 id="复制变量值"><a href="#复制变量值" class="headerlink" title="复制变量值"></a>复制变量值</h3><p>和Java类似，对于基本类型，都是值传递；对于引用类型，都是引用传递。  </p><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p>和Java相同。  </p><h3 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h3><p>可以使用<code>instanceof</code>来判断该对象是什么类型的对象。</p><h2 id="执行环境与作用域"><a href="#执行环境与作用域" class="headerlink" title="执行环境与作用域"></a>执行环境与作用域</h2><p>执行环境定义了变量或函数有权访问的其它数据，决定了它们各自的行为。<br>全局执行环境是最外围的执行环境。在Web浏览器中，全局执行对象是<code>window</code>对象，因为所有全局变量和函数都是作为<code>window</code>对象的属性和方法创建的。<br>每个函数也有自己的执行环境，当执行流进入一个函数时，函数得环境就会被推入一个环境栈中，函数执行完毕后，栈将其弹出。  </p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>作用域链的用途时保证对执行环境有权访问的所有变量和函数的有序访问。<br>作用域链的前端始终都是当前执行的代码所在环境的变量对象。下一个对象来自包含环境直到全局执行环境。<br>延长作用域链：有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象会在代码执行后被移除，比如  </p><ul><li>try-catch中的catch块：创建一个新的变量对象。</li><li>with语句：将指定的最想添加到链中。  </li></ul><p>在<code>JavaScript</code>中没有块级作用域，比如如下例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> color = <span class="string">"blue"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(color);<span class="comment">//blue</span></span><br></pre></td></tr></table></figure></p><p>在Java中，color在if执行完成后会被销毁，在JavaScript中不会，在上面的例子中添加到了全局对象中。</p><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>暂时理解为和Java相同。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;变量、作用域和内存问题&quot;&gt;&lt;a href=&quot;#变量、作用域和内存问题&quot; class=&quot;headerlink&quot; title=&quot;变量、作用域和内存问题&quot;&gt;&lt;/a&gt;变量、作用域和内存问题&lt;/h1&gt;&lt;p&gt;ECMAScript变量包含了两种数据类型的值：&lt;/p&gt;
&lt;ul&gt;

      
    
    </summary>
    
      <category term="JavaScript笔记" scheme="http://yoursite.com/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Code" scheme="http://yoursite.com/tags/Code/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计笔记1</title>
    <link href="http://yoursite.com/2018/12/01/JavaScript%E5%AD%A6%E4%B9%A01/"/>
    <id>http://yoursite.com/2018/12/01/JavaScript学习1/</id>
    <published>2018-12-01T05:56:53.000Z</published>
    <updated>2018-12-02T13:55:45.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h1><p>JavaScript由三个部分组成。  </p><ul><li>ECMAScript</li><li>DOM（文档对象模型）</li><li>BOM（浏览器对象模型）</li></ul><h1 id="在HTML中使用JavaScript"><a href="#在HTML中使用JavaScript" class="headerlink" title="在HTML中使用JavaScript"></a>在HTML中使用JavaScript</h1><h2 id="lt-script-gt-元素"><a href="#lt-script-gt-元素" class="headerlink" title="&lt;script&gt;元素"></a><code>&lt;script&gt;</code>元素</h2><p><code>&lt;script&gt;</code>定义了6个属性：  </p><ul><li>async：表示应该立即下载脚本，但不应妨碍页面中的其它操作，只对外部脚本有用。</li><li>charset：指定src中的代码字符集。大多数浏览器会忽略。</li><li>defer：表示脚本可以延迟到文档完全被解析和显示后再执行，只对外部脚本有用。</li><li>language：已废弃。</li><li>src：包含要执行代码的外部文件。</li><li>type：表示编写代码使用的脚本语言的内容类型。  </li></ul><p>有两种使用方式。  </p><ul><li>直接在页面中嵌入代码<br><img src="https://raw.githubusercontent.com/KAIKIS/MarkdownPic/master/js1.1.png" alt="嵌入代码"></li><li>包含外部文件<br><img src="https://raw.githubusercontent.com/KAIKIS/MarkdownPic/master/js1.2.png" alt="引入代码"></li></ul><h3 id="标签的位置"><a href="#标签的位置" class="headerlink" title="标签的位置"></a>标签的位置</h3><p>现代的做法通常是放在<code>&lt;body&gt;</code>元素中页面内容的后面。  </p><h3 id="延迟脚本"><a href="#延迟脚本" class="headerlink" title="延迟脚本"></a>延迟脚本</h3><p>当给<code>&lt;script&gt;</code>标签定义了defer属性（<code>defer:&quot;defer&quot;</code>），该脚本会在浏览器遇到<code>&lt;/html&gt;</code>后在执行。定义多个延迟脚本不能保证延迟脚本间按照顺序执行，所以最好只包含一个延迟脚本。  </p><h3 id="异步脚本"><a href="#异步脚本" class="headerlink" title="异步脚本"></a>异步脚本</h3><p>当给<code>&lt;script&gt;</code>标签定义了async属性，浏览器会立即下载文件，下载完成后会立即执行，所以不能保证多个异步脚本按照顺序执行。同时，建议异步脚本不要在加载期间修改DOM。  </p><h2 id="嵌入代码与外部文件"><a href="#嵌入代码与外部文件" class="headerlink" title="嵌入代码与外部文件"></a>嵌入代码与外部文件</h2><p>最好还是尽可能的使用外部文件来包含代码，有如下优点：  </p><ul><li>可维护性</li><li>可缓存：浏览器会缓存所有外部<code>JavaScript</code>文件,如果有多个页面使用了一个文件，那么该文件只会下载一次。</li><li>适应未来  </li></ul><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><strong>严格模式</strong></p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li><li>Object</li></ul><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p>只有一个值<code>undefined</code>，一个变量没有初始化时，这个变量的值就是<code>undefined</code>。<br>需要注意的是，变量经过定义后的默认值就是<code>undefined</code>，而没有经过定义的变量通过<code>typeof</code>来判断时也是<code>undefined</code>。</p><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p>只有一个值<code>null</code>，Null类型的作用是如果定义的变量将来用来保存对象，应该显示的将对象初始化为<code>null</code>。<br>需要注意的是：  </p><ol><li><p>变量为null时，使用<code>typeof</code>操作符会返回null。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> car);<span class="comment">//object</span></span><br></pre></td></tr></table></figure></li><li><p><code>undefined</code>是由<code>null</code>派生的，所以它们的相等性为<code>true</code>。</p></li></ol><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p>和Java不太一样，其它基本类型可以转化为Boolean。  </p><table><thead><tr><th>数据类型</th><th>true</th><th>false</th></tr></thead><tbody><tr><td>String</td><td>非空字符串</td><td>“”</td></tr><tr><td>Number</td><td>非零数值</td><td>0和NaN</td></tr><tr><td>Object</td><td>任何对象</td><td>null</td></tr><tr><td>Undefined</td><td>不适用</td><td>undefined</td></tr></tbody></table><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h4><ol><li>十进制</li><li>八进制：<code>var a = 070</code>，在严格模式下无效。</li><li>十六进制：<code>var a = 0x11</code>。</li><li><code>NaN</code>（Not a number)：与任何值都不等包括自身，可以用函数<code>isNaN()</code>判断。</li></ol><h4 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h4><p>有三个函数可以将非数值转换为数值：<code>Number()</code>,<code>parseInt()</code>,<code>parseFloat()</code>。  </p><ol><li><p><code>Number()</code></p><ul><li>Boolean：ture为1，false为2；</li><li>null：0；</li><li>undefined：NaN；</li><li>String：<ul><li>字符串中只包含数字，会转换为十进制的数，前导的0会被忽略。</li><li>包含浮点格式，会转换为浮点数，忽略前导0。</li><li>包含有效的十六进制，转换为大小相同的十进制。</li><li>字符串为空，返回0。</li><li>除此之外，返回NaN。</li></ul></li><li>对象：先调用对象的<code>valueOf()</code>方法，按照前面的规则转化；如果返回的结果为NaN，再调用对象的<code>toString()</code>方法，按照前面的规则转换返回的字符串。 </li></ul></li><li><p><code>parseInt()</code>：在处理字符串时更常用。忽略字符串前面的空格直到第一个非空格字符，如果第一个字符不是数字或者符号，返回NaN。如果是数字，则继续解析完或遇到第二个非数字字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二个参数代表转换的进制，默认为十进制</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"   1"</span>, <span class="number">10</span>);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"a111"</span>, <span class="number">10</span>);<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"11a11"</span>, <span class="number">10</span>);<span class="comment">//11</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"070"</span>, <span class="number">8</span>);<span class="comment">//八进制，56</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"0xA"</span>, <span class="number">16</span>);<span class="comment">//十六进制，10</span></span><br></pre></td></tr></table></figure></li><li><p><code>parseFloat()</code>：只能解析十进制，方式与<code>parseInt()</code>类似。</p></li></ol><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>和Java类似，字符串是不可变的。</p><h4 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h4><p><code>Number</code>、<code>Boolean</code>、<code>Object</code>、<code>String</code>都有<code>toString()</code>方法，但<code>Null</code>和<code>Undefined</code>没有。<br>在不知道要转换的值是不是null或undefined的情况，可以使用转型函数<code>String()</code>，遵循以下规则：  </p><ul><li>有<code>toString()</code>方法，则调用该方法并返回。</li><li>null，返回”null”。</li><li>undefined，返回”undefined”。</li></ul><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>和Java相同，<code>Object</code>是所有类型的基础。<code>Object</code>有如下属性和结果：  </p><ul><li><code>constructor</code>：构造函数。</li><li><code>hasOwnProperty(propertyName)</code>：用于检查给定的属性在当前实例中是否存在。</li><li><code>isPrototypeOf(object)</code>：检查传入的对象是否是传入对象的类型。</li><li><code>propertyIsEnumerable(propertyName)</code>：检查给定的属性是否能够使用for-in语句来枚举。</li><li><code>toLocaleString()</code>：返回与执行环境的地区对应的字符串。</li><li><code>toString()</code></li><li><code>valueOf()</code></li></ul><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h3><p>类似与Java中的forEach。在要迭代的对象是null或undefined时，将跳出循环体。</p><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><p>同Java中的标签，通常在循环体上使用，来改变执行顺序。</p><h3 id="with（在严格模式下不能使用）"><a href="#with（在严格模式下不能使用）" class="headerlink" title="with（在严格模式下不能使用）"></a>with（<strong>在严格模式下不能使用</strong>）</h3><p>作用是将代码的作用域设置到一个特定的对象中。比如，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(location)&#123;</span><br><span class="line">    <span class="keyword">var</span> qs = search.substring(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> hostName = hostName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> qs = location.search.substring(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> hostName = location.hostName;</span><br></pre></td></tr></table></figure></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数在定义时不必指定是否返回值。实际上，任何函数在任何时候都可以通过<code>return</code>返回值。<br><strong>推荐函数要么就在任何情况下都有返回值，要么就都没有返回值</strong><br>在严格模式下：</p><ul><li>不能把函数命名为eval或arguments</li><li>不能把参数命名为eval或arguments</li><li>不能出现两个命名参数同名的情况</li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>ECMAScript函数不介意传递进来多少个参数，也就是说传入与定义的参数数量不符也不会有错。原因在于参数在内部是一个数组，函数体内可以通过<code>arguments</code>对象来访问这个数组。<br><strong>严格模式下不要对<code>arguments</code>进行写操作</strong>。<br>在ECMAScript中所有的参数传递都是值。</p><h3 id="没有重载"><a href="#没有重载" class="headerlink" title="没有重载"></a>没有重载</h3><p>同名函数会由最后定义的函数决定。可以通过传入参数的类型和数量来模拟重载，比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//doSomething</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">//doSomething</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript实现&quot;&gt;&lt;a href=&quot;#JavaScript实现&quot; class=&quot;headerlink&quot; title=&quot;JavaScript实现&quot;&gt;&lt;/a&gt;JavaScript实现&lt;/h1&gt;&lt;p&gt;JavaScript由三个部分组成。  &lt;/p&gt;
&lt;ul&gt;

      
    
    </summary>
    
      <category term="JavaScript笔记" scheme="http://yoursite.com/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Code" scheme="http://yoursite.com/tags/Code/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
